"use client";

import { zodResolver } from '@hookform/resolvers/zod';
import { useForm } from 'react-hook-form';
import { z } from 'zod';
import type { Employee, Service } from '@/lib/types';
import { Button } from '@/components/ui/button';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter, DialogDescription } from '@/components/ui/dialog';
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Checkbox } from '@/components/ui/checkbox';
import { useEffect } from 'react';

const employeeSchema = z.object({
  name: z.string().min(1, "Employee name is required"),
  contact: z.string().email("Invalid email address").or(z.string().min(10, "Phone number seems too short")),
  serviceIds: z.array(z.string()).min(1, "At least one service must be selected"),
  roles: z.string().min(1, "Roles are required (comma-separated)").transform(val => val.split(',').map(s => s.trim()).filter(Boolean)),
  preferences: z.string().optional(),
  availability: z.string().optional(),
  constraints: z.string().optional(),
});

type EmployeeFormData = Omit<z.infer<typeof employeeSchema>, 'roles'> & { roles: string }; // Keep roles as string for input

interface EmployeeFormProps {
  isOpen: boolean;
  onClose: () => void;
  onSubmit: (employee: Employee) => void;
  employee?: Employee | null;
  availableServices: Service[];
}

export default function EmployeeForm({ isOpen, onClose, onSubmit, employee, availableServices }: EmployeeFormProps) {
  const form = useForm<EmployeeFormData>({
    resolver: zodResolver(employeeSchema.extend({ roles: z.string() })), // Use string for form input
    defaultValues: {
      name: '',
      contact: '',
      serviceIds: [],
      roles: '',
      preferences: '',
      availability: '',
      constraints: '',
    },
  });

  useEffect(() => {
    if (employee) {
      form.reset({
        name: employee.name,
        contact: employee.contact,
        serviceIds: employee.serviceIds,
        roles: employee.roles.join(', '),
        preferences: employee.preferences,
        availability: employee.availability,
        constraints: employee.constraints,
      });
    } else {
      form.reset({
        name: '',
        contact: '',
        serviceIds: [],
        roles: '',
        preferences: '',
        availability: '',
        constraints: '',
      });
    }
  }, [employee, form, isOpen]);

  const handleSubmit = (data: EmployeeFormData) => {
    const processedData = {
      ...data,
      roles: data.roles.split(',').map(s => s.trim()).filter(Boolean),
    };
    onSubmit({
      id: employee?.id || '', // ID will be generated by parent if new
      ...processedData,
    });
    onClose();
  };

  return (
    <Dialog open={isOpen} onOpenChange={(open) => { if (!open) onClose(); }}>
      <DialogContent className="sm:max-w-md">
        <DialogHeader>
          <DialogTitle>{employee ? 'Edit Employee' : 'Add New Employee'}</DialogTitle>
          <DialogDescription>
            {employee ? 'Update the details of the employee.' : 'Fill in the details for the new employee.'}
          </DialogDescription>
        </DialogHeader>
        <Form {...form}>
          <form onSubmit={form.handleSubmit(handleSubmit)} className="space-y-3 py-2 max-h-[70vh] overflow-y-auto pr-2">
            <FormField control={form.control} name="name" render={({ field }) => (
              <FormItem><FormLabel>Full Name</FormLabel><FormControl><Input placeholder="e.g., Dr. John Doe" {...field} /></FormControl><FormMessage /></FormItem>
            )} />
            <FormField control={form.control} name="contact" render={({ field }) => (
              <FormItem><FormLabel>Contact (Email/Phone)</FormLabel><FormControl><Input placeholder="john.doe@hospital.com or 555-1234" {...field} /></FormControl><FormMessage /></FormItem>
            )} />
             <FormField control={form.control} name="roles" render={({ field }) => (
              <FormItem><FormLabel>Roles (comma-separated)</FormLabel><FormControl><Input placeholder="e.g., Nurse, Surgeon" {...field} /></FormControl><FormMessage /></FormItem>
            )} />
            <FormField
              control={form.control}
              name="serviceIds"
              render={() => (
                <FormItem>
                  <FormLabel>Assignable Services</FormLabel>
                  {availableServices.map((service) => (
                    <FormField
                      key={service.id}
                      control={form.control}
                      name="serviceIds"
                      render={({ field }) => {
                        return (
                          <FormItem className="flex flex-row items-start space-x-3 space-y-0 my-2">
                            <FormControl>
                              <Checkbox
                                checked={field.value?.includes(service.id)}
                                onCheckedChange={(checked) => {
                                  return checked
                                    ? field.onChange([...(field.value || []), service.id])
                                    : field.onChange(
                                        (field.value || []).filter(
                                          (value) => value !== service.id
                                        )
                                      );
                                }}
                              />
                            </FormControl>
                            <FormLabel className="font-normal">
                              {service.name}
                            </FormLabel>
                          </FormItem>
                        );
                      }}
                    />
                  ))}
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField control={form.control} name="preferences" render={({ field }) => (
              <FormItem><FormLabel>Preferences</FormLabel><FormControl><Textarea placeholder="e.g., Prefers morning shifts" {...field} /></FormControl><FormMessage /></FormItem>
            )} />
            <FormField control={form.control} name="availability" render={({ field }) => (
              <FormItem><FormLabel>Availability</FormLabel><FormControl><Textarea placeholder="e.g., Mon-Fri, not available on holidays" {...field} /></FormControl><FormMessage /></FormItem>
            )} />
            <FormField control={form.control} name="constraints" render={({ field }) => (
              <FormItem><FormLabel>Constraints</FormLabel><FormControl><Textarea placeholder="e.g., Max 40 hours/week" {...field} /></FormControl><FormMessage /></FormItem>
            )} />
            <DialogFooter className="pt-4">
              <Button type="button" variant="outline" onClick={onClose}>Cancel</Button>
              <Button type="submit">{employee ? 'Save Changes' : 'Create Employee'}</Button>
            </DialogFooter>
          </form>
        </Form>
      </DialogContent>
    </Dialog>
  );
}
